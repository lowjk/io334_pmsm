-- -------------------------------------------------------------
-- 
-- File Name: tmp_vhdl\crank_encoder_fpga_module\sg_cranke_Crank_Encoder_FPGA_Code_Module.vhd
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.2
-- Target subsystem base rate: 0.2
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        0.2
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Angle                         ce_out        0.2
-- Direction                     ce_out        0.2
-- Crankshaft                    ce_out        0.2
-- Tooth_Angle                   ce_out        0.2
-- Missing_Tooth                 ce_out        0.2
-- Version                       ce_out        0.2
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: sg_cranke_Crank_Encoder_FPGA_Code_Module
-- Source Path: crank_encoder_fpga_module/Crank Encoder FPGA Code Module
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY sg_cranke_Crank_Encoder_FPGA_Code_Module IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Delta_Position                    :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Enable                            :   IN    std_logic;
        Tooth_Length                      :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Number_of_Crank_Teeth             :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Crank_On                          :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Crank_Off                         :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Number_of_Crank_Missing_Teeth     :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Invert_Crankshaft                 :   IN    std_logic;
        Start_Angle                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Start_Angle_Internal              :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Start_Tooth                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        ce_out                            :   OUT   std_logic;
        Angle                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        Direction                         :   OUT   std_logic;
        Crankshaft                        :   OUT   std_logic;
        Tooth_Angle                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        Missing_Tooth                     :   OUT   std_logic;
        Version                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END sg_cranke_Crank_Encoder_FPGA_Code_Module;


ARCHITECTURE rtl OF sg_cranke_Crank_Encoder_FPGA_Code_Module IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Enable_1                         : std_logic;
  SIGNAL FixPt_Relational_Operator_relop1 : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL U_k_1                            : std_logic;
  SIGNAL FixPt_Relational_Operator2_relop1 : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Number_of_Crank_Teeth_unsigned   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Gain1_cast                       : unsigned(63 DOWNTO 0);  -- ufix64_En30
  SIGNAL Gain_out1                        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Add2_out1                        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL FixPt_Relational_Operator3_relop1 : std_logic;
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Tooth_Length_unsigned            : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Gain_cast                        : unsigned(63 DOWNTO 0);  -- ufix64_En32
  SIGNAL Gain_out1_1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bitwise_Operator_out1            : std_logic;
  SIGNAL Start_Angle_Internal_unsigned    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delta_Position_unsigned          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Add2_out1_1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Add1_out1                        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Add3_out1                        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Relational_Operator1_relop1      : std_logic;
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL Switch4_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bit_Slice_out1                   : std_logic;  -- ufix1
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL Switch3_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch5_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Unit_Delay_Resettable1_switch_delay : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay_Resettable1_out1      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_Type_Conversion_out1        : std_logic;
  SIGNAL Bitwise_Operator1_out1           : std_logic;
  SIGNAL Bitwise_Operator_out1_1          : std_logic;
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL Bitwise_Operator_out1_2          : std_logic;
  SIGNAL Start_Tooth_unsigned             : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Unit_Delay_Resettable2_out1      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Add_out1                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Add1_out1_1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch3_out1_1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Compare_To_Zero_out1             : std_logic;
  SIGNAL Bitwise_Operator2_out1           : std_logic;
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL Switch4_out1_1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch2_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Bitwise_Operator1_out1_1         : std_logic;
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL Switch1_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch5_out1_1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Unit_Delay_Resettable2_switch_delay : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL CurrentTooth                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Compare_To_Zero_out1_1           : std_logic;
  SIGNAL U_k_1_1                          : std_logic;
  SIGNAL FixPt_Relational_Operator1_relop1 : std_logic;
  SIGNAL switch_compare_1_9               : std_logic;
  SIGNAL InternalAngle                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bitwise_Operator_out1_3          : std_logic;
  SIGNAL Start_Angle_unsigned             : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Unit_Delay_Resettable_out1       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Add_out1_1                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch1_out1_1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Unit_Delay_Resettable_switch_delay : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL Bit_Slice_out1_1                 : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_1      : std_logic;
  SIGNAL switch_compare_1_10              : std_logic;
  SIGNAL Relational_Operator3_relop1      : std_logic;
  SIGNAL Gain2_out1                       : unsigned(63 DOWNTO 0);  -- ufix64_En30
  SIGNAL Number_of_Crank_Missing_Teeth_unsigned : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Subtract1_out1                   : unsigned(63 DOWNTO 0);  -- ufix64_En30
  SIGNAL Relational_Operator4_relop1      : std_logic;
  SIGNAL Subtract_out1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Relational_Operator5_relop1      : std_logic;
  SIGNAL Bitwise_Operator5_out1           : std_logic;
  SIGNAL Relational_Operator21_relop1     : std_logic;
  SIGNAL Bitwise_Operator3_out1           : std_logic;
  SIGNAL Bitwise_Operator4_out1           : std_logic;
  SIGNAL Crank_Off_unsigned               : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Gain2_cast                       : unsigned(63 DOWNTO 0);  -- ufix64_En32
  SIGNAL Gain_out1_2                      : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Relational_Operator2_relop1      : std_logic;
  SIGNAL Crank_On_unsigned                : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Gain11_cast                      : unsigned(63 DOWNTO 0);  -- ufix64_En32
  SIGNAL Gain1_out1                       : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Relational_Operator11_relop1     : std_logic;
  SIGNAL Bitwise_Operator_out1_4          : std_logic;
  SIGNAL Bitwise_Operator2_out1_1         : std_logic;
  SIGNAL Bitwise_Operator1_out1_2         : std_logic;
  SIGNAL Switch_out1_1                    : std_logic;
  SIGNAL Bit_Slice_out1_2                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Bit_Concat_out1                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL U_k_1_2                          : std_logic;
  SIGNAL U_k_1_3                          : std_logic;

BEGIN
  -- Edge
  -- 
  -- U(k)
  -- 
  -- Edge
  -- 
  -- U(k)
  -- 
  -- Edge
  -- 
  -- U(k)
  -- 
  -- Edge
  -- 
  -- U(k)

  enb <= clk_enable;

  -- 
  -- Store in Global RAM
  -- 
  -- 
  -- Store in Global RAM
  reduced_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        Enable_1 <= '0';
      ELSIF enb = '1' THEN
        Enable_1 <= Enable;
      END IF;
    END IF;
  END PROCESS reduced_process;


  
  FixPt_Relational_Operator_relop1 <= '1' WHEN Enable > Enable_1 ELSE
      '0';

  
  switch_compare_1 <= '1' WHEN FixPt_Relational_Operator_relop1 > '0' ELSE
      '0';

  Delay_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay_out1 <= Enable;
      END IF;
    END IF;
  END PROCESS Delay_process;


  -- 
  -- Store in Global RAM
  Delay_Input12_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        U_k_1 <= '0';
      ELSIF enb = '1' THEN
        U_k_1 <= Delay_out1;
      END IF;
    END IF;
  END PROCESS Delay_Input12_process;


  
  FixPt_Relational_Operator2_relop1 <= '1' WHEN Delay_out1 > U_k_1 ELSE
      '0';

  
  switch_compare_1_1 <= '1' WHEN FixPt_Relational_Operator2_relop1 > '0' ELSE
      '0';

  Number_of_Crank_Teeth_unsigned <= unsigned(Number_of_Crank_Teeth);

  Gain1_cast <= resize(Number_of_Crank_Teeth_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Gain_out1 <= Gain1_cast(61 DOWNTO 30);

  Add2_out1 <= Gain_out1 - to_unsigned(1, 32);

  
  FixPt_Relational_Operator3_relop1 <= '1' WHEN Enable > Enable_1 ELSE
      '0';

  
  switch_compare_1_2 <= '1' WHEN FixPt_Relational_Operator3_relop1 > '0' ELSE
      '0';

  Tooth_Length_unsigned <= unsigned(Tooth_Length);

  Gain_cast <= resize(Tooth_Length_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Gain_out1_1 <= Gain_cast(63 DOWNTO 32);

  Bitwise_Operator_out1 <=  NOT Enable;

  Start_Angle_Internal_unsigned <= unsigned(Start_Angle_Internal);

  Delta_Position_unsigned <= unsigned(Delta_Position);

  Add1_out1 <= Add2_out1_1 + Gain_out1_1;

  Add3_out1 <= Add2_out1_1 - Gain_out1_1;

  
  Relational_Operator1_relop1 <= '1' WHEN Add2_out1_1 >= Gain_out1_1 ELSE
      '0';

  
  switch_compare_1_3 <= '1' WHEN Relational_Operator1_relop1 > '0' ELSE
      '0';

  
  Switch4_out1 <= Add2_out1_1 WHEN switch_compare_1_3 = '0' ELSE
      Add3_out1;

  
  switch_compare_1_4 <= '1' WHEN Bit_Slice_out1 > '0' ELSE
      '0';

  
  Switch3_out1 <= Switch4_out1 WHEN switch_compare_1_4 = '0' ELSE
      Add1_out1;

  
  Switch5_out1 <= Switch3_out1 WHEN switch_compare_1_2 = '0' ELSE
      Start_Angle_Internal_unsigned;

  Unit_Delay_Resettable1_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        Unit_Delay_Resettable1_switch_delay <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        IF Bitwise_Operator_out1 = '1' THEN
          Unit_Delay_Resettable1_switch_delay <= to_unsigned(0, 32);
        ELSE 
          Unit_Delay_Resettable1_switch_delay <= Switch5_out1;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Resettable1_process;

  
  Unit_Delay_Resettable1_out1 <= to_unsigned(0, 32) WHEN Bitwise_Operator_out1 = '1' ELSE
      Unit_Delay_Resettable1_switch_delay;

  Add2_out1_1 <= Unit_Delay_Resettable1_out1 + Delta_Position_unsigned;

  Bit_Slice_out1 <= Add2_out1_1(31);

  
  Data_Type_Conversion_out1 <= '1' WHEN Bit_Slice_out1 /= '0' ELSE
      '0';

  Bitwise_Operator1_out1 <=  NOT Data_Type_Conversion_out1;

  Bitwise_Operator_out1_1 <= Bitwise_Operator1_out1 AND Relational_Operator1_relop1;

  
  switch_compare_1_5 <= '1' WHEN Bitwise_Operator_out1_1 > '0' ELSE
      '0';

  
  switch_compare_1_6 <= '1' WHEN Data_Type_Conversion_out1 > '0' ELSE
      '0';

  Bitwise_Operator_out1_2 <=  NOT Enable;

  Start_Tooth_unsigned <= unsigned(Start_Tooth);

  Add_out1 <= Unit_Delay_Resettable2_out1 + to_unsigned(1, 32);

  Add1_out1_1 <= Unit_Delay_Resettable2_out1 - to_unsigned(1, 32);

  
  Switch3_out1_1 <= Unit_Delay_Resettable2_out1 WHEN switch_compare_1_6 = '0' ELSE
      Add2_out1;

  
  Compare_To_Zero_out1 <= '1' WHEN Unit_Delay_Resettable2_out1 > to_unsigned(0, 32) ELSE
      '0';

  Bitwise_Operator2_out1 <= Data_Type_Conversion_out1 AND Compare_To_Zero_out1;

  
  switch_compare_1_7 <= '1' WHEN Bitwise_Operator2_out1 > '0' ELSE
      '0';

  
  Switch4_out1_1 <= Switch3_out1_1 WHEN switch_compare_1_7 = '0' ELSE
      Add1_out1_1;

  
  Switch2_out1 <= Switch4_out1_1 WHEN switch_compare_1_5 = '0' ELSE
      to_unsigned(0, 32);

  
  Relational_Operator_relop1 <= '1' WHEN Unit_Delay_Resettable2_out1 < Add2_out1 ELSE
      '0';

  Bitwise_Operator1_out1_1 <= Relational_Operator_relop1 AND Bitwise_Operator_out1_1;

  
  switch_compare_1_8 <= '1' WHEN Bitwise_Operator1_out1_1 > '0' ELSE
      '0';

  
  Switch1_out1 <= Switch2_out1 WHEN switch_compare_1_8 = '0' ELSE
      Add_out1;

  
  Switch5_out1_1 <= Switch1_out1 WHEN switch_compare_1_1 = '0' ELSE
      Start_Tooth_unsigned;

  Unit_Delay_Resettable2_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        Unit_Delay_Resettable2_switch_delay <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        IF Bitwise_Operator_out1_2 = '1' THEN
          Unit_Delay_Resettable2_switch_delay <= to_unsigned(0, 32);
        ELSE 
          Unit_Delay_Resettable2_switch_delay <= Switch5_out1_1;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Resettable2_process;

  
  Unit_Delay_Resettable2_out1 <= to_unsigned(0, 32) WHEN Bitwise_Operator_out1_2 = '1' ELSE
      Unit_Delay_Resettable2_switch_delay;

  CurrentTooth <= Unit_Delay_Resettable2_out1;

  
  Compare_To_Zero_out1_1 <= '1' WHEN CurrentTooth = to_unsigned(0, 32) ELSE
      '0';

  -- 
  -- Store in Global RAM
  Delay_Input11_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        U_k_1_1 <= '0';
      ELSIF enb = '1' THEN
        U_k_1_1 <= Compare_To_Zero_out1_1;
      END IF;
    END IF;
  END PROCESS Delay_Input11_process;


  
  FixPt_Relational_Operator1_relop1 <= '1' WHEN Compare_To_Zero_out1_1 > U_k_1_1 ELSE
      '0';

  
  switch_compare_1_9 <= '1' WHEN FixPt_Relational_Operator1_relop1 > '0' ELSE
      '0';

  InternalAngle <= Unit_Delay_Resettable1_out1;

  Bitwise_Operator_out1_3 <=  NOT Enable;

  Start_Angle_unsigned <= unsigned(Start_Angle);

  Add_out1_1 <= Delta_Position_unsigned + Unit_Delay_Resettable_out1;

  
  Switch_out1 <= Add_out1_1 WHEN switch_compare_1_9 = '0' ELSE
      InternalAngle;

  
  Switch1_out1_1 <= Switch_out1 WHEN switch_compare_1 = '0' ELSE
      Start_Angle_unsigned;

  Unit_Delay_Resettable_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        Unit_Delay_Resettable_switch_delay <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        IF Bitwise_Operator_out1_3 = '1' THEN
          Unit_Delay_Resettable_switch_delay <= to_unsigned(0, 32);
        ELSE 
          Unit_Delay_Resettable_switch_delay <= Switch1_out1_1;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Resettable_process;

  
  Unit_Delay_Resettable_out1 <= to_unsigned(0, 32) WHEN Bitwise_Operator_out1_3 = '1' ELSE
      Unit_Delay_Resettable_switch_delay;

  Angle <= std_logic_vector(Unit_Delay_Resettable_out1);

  Bit_Slice_out1_1 <= Delta_Position_unsigned(31);

  
  Data_Type_Conversion_out1_1 <= '1' WHEN Bit_Slice_out1_1 /= '0' ELSE
      '0';

  
  switch_compare_1_10 <= '1' WHEN Invert_Crankshaft > '0' ELSE
      '0';

  
  Relational_Operator3_relop1 <= '1' WHEN CurrentTooth >= Number_of_Crank_Teeth_unsigned ELSE
      '0';

  Gain2_out1 <= resize(Number_of_Crank_Teeth_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);

  Number_of_Crank_Missing_Teeth_unsigned <= unsigned(Number_of_Crank_Missing_Teeth);

  Subtract1_out1 <= Gain2_out1 - (resize(Number_of_Crank_Missing_Teeth_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64));

  
  Relational_Operator4_relop1 <= '1' WHEN CurrentTooth < Number_of_Crank_Teeth_unsigned ELSE
      '0';

  Subtract_out1 <= Number_of_Crank_Teeth_unsigned - Number_of_Crank_Missing_Teeth_unsigned;

  
  Relational_Operator5_relop1 <= '1' WHEN resize(CurrentTooth & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64) < Subtract1_out1 ELSE
      '0';

  Bitwise_Operator5_out1 <= Relational_Operator3_relop1 AND Relational_Operator5_relop1;

  
  Relational_Operator21_relop1 <= '1' WHEN CurrentTooth < Subtract_out1 ELSE
      '0';

  Bitwise_Operator3_out1 <= Relational_Operator4_relop1 AND Relational_Operator21_relop1;

  Bitwise_Operator4_out1 <= Bitwise_Operator5_out1 OR Bitwise_Operator3_out1;

  Crank_Off_unsigned <= unsigned(Crank_Off);

  Gain2_cast <= resize(Crank_Off_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Gain_out1_2 <= resize(Gain2_cast(63 DOWNTO 32), 64);

  
  Relational_Operator2_relop1 <= '1' WHEN resize(InternalAngle, 64) <= Gain_out1_2 ELSE
      '0';

  Crank_On_unsigned <= unsigned(Crank_On);

  Gain11_cast <= resize(Crank_On_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Gain1_out1 <= resize(Gain11_cast(63 DOWNTO 32), 64);

  
  Relational_Operator11_relop1 <= '1' WHEN resize(InternalAngle, 64) >= Gain1_out1 ELSE
      '0';

  Bitwise_Operator_out1_4 <= Relational_Operator2_relop1 AND Relational_Operator11_relop1;

  Bitwise_Operator2_out1_1 <= Bitwise_Operator4_out1 AND Bitwise_Operator_out1_4;

  Bitwise_Operator1_out1_2 <=  NOT Bitwise_Operator2_out1_1;

  
  Switch_out1_1 <= Bitwise_Operator2_out1_1 WHEN switch_compare_1_10 = '0' ELSE
      Bitwise_Operator1_out1_2;

  Tooth_Angle <= std_logic_vector(Unit_Delay_Resettable1_out1);

  Bit_Slice_out1_2 <= to_unsigned(16#040#, 10);

  Bit_Concat_out1 <= "10" & (Bit_Slice_out1_2 & unsigned'("0000000011" & "0000000011"));

  Version <= std_logic_vector(Bit_Concat_out1);

  ce_out <= clk_enable;

  Direction <= Data_Type_Conversion_out1_1;

  Crankshaft <= Switch_out1_1;

  Missing_Tooth <= Bitwise_Operator4_out1;

END rtl;

