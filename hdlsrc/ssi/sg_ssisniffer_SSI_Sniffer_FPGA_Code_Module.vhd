-- -------------------------------------------------------------
-- 
-- File Name: tmp_vhdl\ssi_sniffer_fpga_code_module\sg_ssisniffer_SSI_Sniffer_FPGA_Code_Module.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.2
-- Target subsystem base rate: 0.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: sg_ssisniffer_SSI_Sniffer_FPGA_Code_Module
-- Source Path: ssi_sniffer_fpga_code_module/SSI Sniffer FPGA Code Module
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY sg_ssisniffer_SSI_Sniffer_FPGA_Code_Module IS
  PORT( clk_i                             :   IN    std_logic;
        reset_i                           :   IN    std_logic;
        SCK                               :   IN    std_logic;
        SDI                               :   IN    std_logic;
        Line_Delay                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        Data                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        Number_Of_Bits                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        Number_Of_Bits_Error              :   OUT   std_logic;
        SSI_2                             :   OUT   std_logic;
        SCK_Period                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        Version                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END sg_ssisniffer_SSI_Sniffer_FPGA_Code_Module;


ARCHITECTURE rtl OF sg_ssisniffer_SSI_Sniffer_FPGA_Code_Module IS

  -- Signals
  SIGNAL clk_in                           : std_logic;
  SIGNAL Unit_Delay1_reg                  : std_logic_vector(0 TO 1) := (OTHERS => '0');  -- ufix1 [2]
  SIGNAL Unit_Delay_out1                  : std_logic;
  SIGNAL Line_Delay_unsigned              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL MATLAB_Function_out1             : std_logic;
  SIGNAL MA_buf                           : std_logic_vector(0 TO 255);  -- boolean [256]
  SIGNAL MA_buf_next                      : std_logic_vector(0 TO 255);  -- boolean [256]
  SIGNAL clk_delayed                      : std_logic := '0';
  SIGNAL FixPt_Relational_Operator1_relop1 : std_logic;
  SIGNAL FixPt_Relational_Operator2_relop1 : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable_Synchronous1_out1 : std_logic := '0';
  SIGNAL low_Cnt                          : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL Gain_out1                        : unsigned(63 DOWNTO 0);  -- ufix64_En30
  SIGNAL Unit_Delay_Enabled_Resettable_Synchronous_out1 : std_logic := '0';
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL NOT_out1                         : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL high_Cnt                         : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL U_k_1                            : std_logic := '0';
  SIGNAL FixPt_Relational_Operator3_relop1 : std_logic;
  SIGNAL Unit_Delay_out1_1                : std_logic := '0';
  SIGNAL Sum_out1                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Tsck                             : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL Gain1_out1                       : unsigned(63 DOWNTO 0);  -- ufix64_En30
  SIGNAL GreaterThanOrEqual_relop1        : std_logic;
  SIGNAL Unit_Delay_Enabled_Synchronous2_out1 : std_logic;
  SIGNAL Unit_Delay_Enabled_Synchronous3_out1 : std_logic;
  SIGNAL Unit_Delay_Enabled_Synchronous1_out1 : std_logic;
  SIGNAL AND_out1                         : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable_Synchronous4_out1 : std_logic := '0';
  SIGNAL Unit_Delay_Enabled_Resettable_Synchronous_out1_1 : std_logic := '0';
  SIGNAL new_bit                          : std_logic;
  SIGNAL new_bit_1                        : std_logic;
  SIGNAL Bitwise_Operator2_out1           : std_logic;
  SIGNAL Bitwise_Operator1_out1           : std_logic;
  SIGNAL Unit_Delay2_reg                  : std_logic_vector(0 TO 1) := (OTHERS => '0');  -- ufix1 [2]
  SIGNAL Unit_Delay_out1_2                : std_logic;
  SIGNAL shft_in                          : unsigned(32 DOWNTO 0) := to_unsigned(0, 33);  -- ufix33
  SIGNAL shft_out                         : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_out1_1                       : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL shft_out_1                       : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Switch_out1                      : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Bit_Slice_out1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Unit_Delay_Enabled_Synchronous_out1 : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL U_k_1_1                          : std_logic := '0';
  SIGNAL FixPt_Relational_Operator_relop1 : std_logic;
  SIGNAL NOT_out1_1                       : std_logic;
  SIGNAL Bit_Counter_out1                 : unsigned(5 DOWNTO 0) := to_unsigned(16#00#, 6);  -- ufix6
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL OR_out1                          : std_logic;
  SIGNAL Bit_Counter_count_step           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_1 : unsigned(5 DOWNTO 0) := to_unsigned(16#00#, 6);  -- ufix6
  SIGNAL Data_Type_Conversion_out1        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Unit_Delay_Enabled_Synchronous1_out1_1 : std_logic := '0';
  SIGNAL Logical_Operator_out1_1          : std_logic;
  SIGNAL Unit_Delay_out1_3                : std_logic := '0';
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_2 : std_logic := '0';
  SIGNAL Add_out1                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Tsck_1                           : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL Unit_Delay_Enabled_Synchronous1_out1_2 : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL Bit_Concat_out1                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL clk_delayed_1                    : std_logic;
  SIGNAL U_k_1_2                          : std_logic;
  SIGNAL U_k_1_3                          : std_logic;

BEGIN
  -- The high part is counting from 0 to N-1. The low part due to pipelining from 0 to N.
  -- This compensates for the additional high cycle
  -- 
  -- For Startup (release reset of the output after the very first SCK cycle
  -- 
  -- This subsystem detects when the line is idle. This occurs when the CLK signal is high for at least twice the low 
  -- duration
  -- 
  -- Edge
  -- 
  -- U(k)
  -- 
  -- Edge
  -- 
  -- U(k)
  -- 
  -- Edge
  -- 
  -- U(k)
  -- 
  -- In case of SSI2, there is an additional bit counted at the end, before the SSI2 is detected, 
  -- which has to be subtracted from the final result
  -- 
  -- Edge
  -- 
  -- U(k)

  clk_in <= SCK;

  Unit_Delay1_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Unit_Delay1_reg(0) <= clk_in;
      Unit_Delay1_reg(1) <= Unit_Delay1_reg(0);
    END IF;
  END PROCESS Unit_Delay1_process;

  Unit_Delay_out1 <= Unit_Delay1_reg(1);

  Line_Delay_unsigned <= unsigned(Line_Delay);

  MATLAB_Function_process : PROCESS (clk_i)
    VARIABLE t_1 : INTEGER;
  BEGIN
    IF rising_edge(clk_i) THEN
      IF reset_i = '1' THEN

        FOR t_1 IN 0 TO 255 LOOP
          MA_buf(t_1) <= '0';
        END LOOP;

      ELSE 

        FOR t_0 IN 0 TO 255 LOOP
          MA_buf(t_0) <= MA_buf_next(t_0);
        END LOOP;

      END IF;
    END IF;
  END PROCESS MATLAB_Function_process;

  MATLAB_Function_output : PROCESS (Line_Delay_unsigned, MA_buf, Unit_Delay_out1)
    VARIABLE MA_buf_temp : std_logic_vector(0 TO 255);
    VARIABLE add_temp : unsigned(8 DOWNTO 0);
    VARIABLE sub_cast : unsigned(7 DOWNTO 0);
    VARIABLE sub_cast_0 : signed(31 DOWNTO 0);
  BEGIN

    FOR t_0 IN 0 TO 255 LOOP
      MA_buf_temp(t_0) := MA_buf(t_0);
    END LOOP;


    FOR t_1 IN 0 TO 254 LOOP
      MA_buf_temp(1 + t_1) := MA_buf(t_1);
    END LOOP;

    MA_buf_temp(0) := Unit_Delay_out1;
    add_temp := resize(Line_Delay_unsigned, 9) + to_unsigned(16#001#, 9);
    IF add_temp(8) /= '0' THEN 
      sub_cast := "11111111";
    ELSE 
      sub_cast := add_temp(7 DOWNTO 0);
    END IF;
    sub_cast_0 := signed(resize(sub_cast, 32));
    MATLAB_Function_out1 <= MA_buf_temp(to_integer(sub_cast_0 - 1));

    FOR t_2 IN 0 TO 255 LOOP
      MA_buf_next(t_2) <= MA_buf_temp(t_2);
    END LOOP;

  END PROCESS MATLAB_Function_output;


  -- 
  -- Store in Global RAM
  -- 
  -- 
  -- Store in Global RAM
  reduced_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      clk_delayed <= MATLAB_Function_out1;
    END IF;
  END PROCESS reduced_process;


  
  FixPt_Relational_Operator1_relop1 <= '1' WHEN MATLAB_Function_out1 < clk_delayed ELSE
      '0';

  
  FixPt_Relational_Operator2_relop1 <= '1' WHEN MATLAB_Function_out1 > clk_delayed ELSE
      '0';

  Unit_Delay_Enabled_Resettable_Synchronous11_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF FixPt_Relational_Operator2_relop1 = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous1_out1 <= '0';
      ELSIF FixPt_Relational_Operator1_relop1 = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous1_out1 <= FixPt_Relational_Operator1_relop1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_Synchronous11_process;


  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  Low_Part_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF FixPt_Relational_Operator1_relop1 = '1' THEN 
        low_Cnt <= to_unsigned(0, 32);
      ELSIF Unit_Delay_Enabled_Resettable_Synchronous1_out1 = '1' THEN 
        low_Cnt <= low_Cnt + to_unsigned(1, 32);
      END IF;
    END IF;
  END PROCESS Low_Part_process;


  Gain_out1 <= resize(low_Cnt & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);

  Unit_Delay_Enabled_Resettable_Synchronous1_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF FixPt_Relational_Operator1_relop1 = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous_out1 <= '0';
      ELSIF FixPt_Relational_Operator2_relop1 = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous_out1 <= FixPt_Relational_Operator2_relop1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_Synchronous1_process;


  NOT_out1 <=  NOT Relational_Operator_relop1;

  Logical_Operator_out1 <= Unit_Delay_Enabled_Resettable_Synchronous_out1 AND NOT_out1;

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  High_Part_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF FixPt_Relational_Operator1_relop1 = '1' THEN 
        high_Cnt <= to_unsigned(0, 32);
      ELSIF Logical_Operator_out1 = '1' THEN 
        high_Cnt <= high_Cnt + to_unsigned(1, 32);
      END IF;
    END IF;
  END PROCESS High_Part_process;


  
  Relational_Operator_relop1 <= '1' WHEN Gain_out1 < resize(high_Cnt & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64) ELSE
      '0';

  -- 
  -- Store in Global RAM
  Delay_Input13_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      U_k_1 <= Relational_Operator_relop1;
    END IF;
  END PROCESS Delay_Input13_process;


  
  FixPt_Relational_Operator3_relop1 <= '1' WHEN Relational_Operator_relop1 > U_k_1 ELSE
      '0';

  Unit_Delay_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Unit_Delay_out1_1 <= FixPt_Relational_Operator3_relop1;
    END IF;
  END PROCESS Unit_Delay_process;


  Sum_out1 <= low_Cnt + high_Cnt;

  Unit_Delay_Enabled_Synchronous2_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF FixPt_Relational_Operator1_relop1 = '1' THEN
        Tsck <= Sum_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous2_process;


  Gain1_out1 <= resize(Tsck & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);

  
  GreaterThanOrEqual_relop1 <= '1' WHEN resize(low_Cnt & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64) >= Gain1_out1 ELSE
      '0';

  Unit_Delay_Enabled_Synchronous21_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF reset_i = '1' THEN
        Unit_Delay_Enabled_Synchronous2_out1 <= '1';
      ELSE 
        IF FixPt_Relational_Operator1_relop1 = '1' THEN
          Unit_Delay_Enabled_Synchronous2_out1 <= '0';
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous21_process;


  Unit_Delay_Enabled_Synchronous3_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF reset_i = '1' THEN
        Unit_Delay_Enabled_Synchronous3_out1 <= '1';
      ELSE 
        IF FixPt_Relational_Operator2_relop1 = '1' THEN
          Unit_Delay_Enabled_Synchronous3_out1 <= Unit_Delay_Enabled_Synchronous2_out1;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous3_process;


  Unit_Delay_Enabled_Synchronous12_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF reset_i = '1' THEN
        Unit_Delay_Enabled_Synchronous1_out1 <= '1';
      ELSE 
        IF FixPt_Relational_Operator1_relop1 = '1' THEN
          Unit_Delay_Enabled_Synchronous1_out1 <= Unit_Delay_Enabled_Synchronous3_out1;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous12_process;


  AND_out1 <= FixPt_Relational_Operator1_relop1 OR Unit_Delay_Enabled_Synchronous1_out1;

  Unit_Delay_Enabled_Resettable_Synchronous4_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF AND_out1 = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous4_out1 <= '0';
      ELSIF GreaterThanOrEqual_relop1 = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous4_out1 <= GreaterThanOrEqual_relop1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_Synchronous4_process;


  Unit_Delay_Enabled_Resettable_Synchronous3_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF FixPt_Relational_Operator3_relop1 = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous_out1_1 <= '0';
      ELSIF FixPt_Relational_Operator1_relop1 = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous_out1_1 <= FixPt_Relational_Operator1_relop1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_Synchronous3_process;


  new_bit <= FixPt_Relational_Operator1_relop1 AND Unit_Delay_Enabled_Resettable_Synchronous_out1_1;

  new_bit_1 <= new_bit;

  Bitwise_Operator2_out1 <=  NOT Unit_Delay_Enabled_Resettable_Synchronous_out1_1;

  Bitwise_Operator1_out1 <= FixPt_Relational_Operator1_relop1 AND Bitwise_Operator2_out1;

  Unit_Delay2_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Unit_Delay2_reg(0) <= SDI;
      Unit_Delay2_reg(1) <= Unit_Delay2_reg(0);
    END IF;
  END PROCESS Unit_Delay2_process;

  Unit_Delay_out1_2 <= Unit_Delay2_reg(1);

  shft_out <= shft_in sll 1;

  Sum_out1_1 <= shft_out + ('0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Unit_Delay_out1_2);

  Unit_Delay_Enabled_Resettable_Synchronous_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF Bitwise_Operator1_out1 = '1' THEN
        shft_in <= to_unsigned(0, 33);
      ELSIF new_bit_1 = '1' THEN
        shft_in <= Sum_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_Synchronous_process;


  shft_out_1 <= shft_in srl 1;

  
  Switch_out1 <= shft_in WHEN Unit_Delay_Enabled_Resettable_Synchronous4_out1 = '0' ELSE
      shft_out_1;

  Bit_Slice_out1 <= Switch_out1(31 DOWNTO 0);

  Unit_Delay_Enabled_Synchronous_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF Unit_Delay_out1_1 = '1' THEN
        Unit_Delay_Enabled_Synchronous_out1 <= Bit_Slice_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous_process;


  Data <= std_logic_vector(Unit_Delay_Enabled_Synchronous_out1);

  -- 
  -- Store in Global RAM
  Delay_Input1_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      U_k_1_1 <= Unit_Delay_Enabled_Resettable_Synchronous4_out1;
    END IF;
  END PROCESS Delay_Input1_process;


  
  FixPt_Relational_Operator_relop1 <= '1' WHEN Unit_Delay_Enabled_Resettable_Synchronous4_out1 > U_k_1_1 ELSE
      '0';

  NOT_out1_1 <=  NOT FixPt_Relational_Operator_relop1;

  
  Compare_To_Constant1_out1 <= '1' WHEN Bit_Counter_out1 > to_unsigned(16#21#, 6) ELSE
      '0';

  Logical_Operator2_out1 <=  NOT Compare_To_Constant1_out1;

  Logical_Operator1_out1 <= new_bit_1 AND Logical_Operator2_out1;

  OR_out1 <= Logical_Operator1_out1 OR FixPt_Relational_Operator_relop1;

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  Bit_Counter_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF Unit_Delay_out1_1 = '1' THEN 
        Bit_Counter_out1 <= to_unsigned(16#00#, 6);
      ELSIF OR_out1 = '1' THEN 
        Bit_Counter_out1 <= Bit_Counter_out1 + Bit_Counter_count_step;
      END IF;
    END IF;
  END PROCESS Bit_Counter_process;

  
  Bit_Counter_count_step <= to_unsigned(16#01#, 6) WHEN NOT_out1_1 = '1' ELSE
      to_unsigned(16#3F#, 6);

  Unit_Delay_Enabled_Synchronous1_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF Unit_Delay_out1_1 = '1' THEN
        Unit_Delay_Enabled_Synchronous_out1_1 <= Bit_Counter_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous1_process;


  Data_Type_Conversion_out1 <= resize(Unit_Delay_Enabled_Synchronous_out1_1, 32);

  Number_Of_Bits <= std_logic_vector(Data_Type_Conversion_out1);

  
  Compare_To_Constant_out1 <= '1' WHEN Bit_Counter_out1 > to_unsigned(16#20#, 6) ELSE
      '0';

  Unit_Delay_Enabled_Synchronous11_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF Unit_Delay_out1_1 = '1' THEN
        Unit_Delay_Enabled_Synchronous1_out1_1 <= Compare_To_Constant_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous11_process;


  Logical_Operator_out1_1 <= Unit_Delay_Enabled_Synchronous1_out1_1 OR Compare_To_Constant1_out1;

  Unit_Delay3_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Unit_Delay_out1_3 <= Unit_Delay_out1_1;
    END IF;
  END PROCESS Unit_Delay3_process;


  Unit_Delay_Enabled_Synchronous4_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF Unit_Delay_out1_3 = '1' THEN
        Unit_Delay_Enabled_Synchronous_out1_2 <= Unit_Delay_Enabled_Resettable_Synchronous4_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous4_process;


  Add_out1 <= Tsck + to_unsigned(1, 32);

  Unit_Delay_Enabled_Resettable_Synchronous2_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF Unit_Delay_Enabled_Synchronous1_out1 = '1' THEN
        Tsck_1 <= to_unsigned(0, 32);
      ELSIF FixPt_Relational_Operator3_relop1 = '1' THEN
        Tsck_1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_Synchronous2_process;


  Unit_Delay_Enabled_Synchronous13_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF Unit_Delay_out1_3 = '1' THEN
        Unit_Delay_Enabled_Synchronous1_out1_2 <= Tsck_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous13_process;


  SCK_Period <= std_logic_vector(Unit_Delay_Enabled_Synchronous1_out1_2);

  Bit_Concat_out1 <= unsigned(std_logic_vector'("10" & ("0000101011" & ("0000000001" & "0000000100"))));

  Version <= std_logic_vector(Bit_Concat_out1);

  Number_Of_Bits_Error <= Logical_Operator_out1_1;

  SSI_2 <= Unit_Delay_Enabled_Synchronous_out1_2;

END rtl;

