-- -------------------------------------------------------------
-- 
-- File Name: tmp_vhdl\biss_sniffer_fpga_code_module\sg_bisssniffer_BISS_Sniffer_FPGA_Code_Module.vhd
-- 
-- Generated by MATLAB 9.6 and HDL Coder 3.14
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 4
-- Target subsystem base rate: 4
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        4
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Number_Of_Bits                ce_out        4
-- Data_high                     ce_out        4
-- Data_low                      ce_out        4
-- Version                       ce_out        4
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: sg_bisssniffer_BISS_Sniffer_FPGA_Code_Module
-- Source Path: biss_sniffer_fpga_code_module/BISS Sniffer FPGA Code Module
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY sg_bisssniffer_BISS_Sniffer_FPGA_Code_Module IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        MA                                :   IN    std_logic;
        Line_Delay                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        SL                                :   IN    std_logic;
        Timeout                           :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        ce_out                            :   OUT   std_logic;
        Number_Of_Bits                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        Data_high                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        Data_low                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        Version                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END sg_bisssniffer_BISS_Sniffer_FPGA_Code_Module;


ARCHITECTURE rtl OF sg_bisssniffer_BISS_Sniffer_FPGA_Code_Module IS

  -- Component Declarations
  COMPONENT sg_bisssniffer_MATLAB_Function
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          MA                              :   IN    std_logic;
          lineDelay                       :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : sg_bisssniffer_MATLAB_Function
    USE ENTITY work.sg_bisssniffer_MATLAB_Function(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Unit_Delay2_reg                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Unit_Delay_out1                  : std_logic;
  SIGNAL y                                : std_logic;
  SIGNAL y_1                              : std_logic;
  SIGNAL FixPt_Relational_Operator1_relop1 : std_logic;
  SIGNAL FixPt_Relational_Operator_relop1 : std_logic;
  SIGNAL falling_edge_rsvd                : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Timeout_unsigned                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL timeout_reached                  : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL count_timeout_out1               : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Relational_Operator1_relop1      : std_logic;
  SIGNAL U_k_1                            : std_logic;
  SIGNAL FixPt_Relational_Operator2_relop1 : std_logic;
  SIGNAL Unit_Delay_out1_1                : std_logic;
  SIGNAL Unit_Delay3_reg                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Unit_Delay_out1_2                : std_logic;
  SIGNAL Bitwise_Operator_out1            : std_logic;
  SIGNAL Bitwise_Operator3_out1           : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable_Synchronous_out1 : std_logic;
  SIGNAL Bitwise_Operator1_out1           : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable_Synchronous_out1_1 : std_logic;
  SIGNAL Bitwise_Operator2_out1           : std_logic;
  SIGNAL Bit_Counter_out1                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Unit_Delay_Enabled_Synchronous1_out1 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Unit_Delay_Enabled_Resettable_Synchronous_out1_2 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Bit_Shift_out1                   : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_add_cast                     : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_out1                         : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Unit_Delay_out1_3                : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Unit_Delay_Enabled_Synchronous_out1 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Bit_Slice_out1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bit_Slice1_out1                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL constant_out1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Unique_ID_out1                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Major_Version_out1               : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Minor_Version_out1               : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Bit_Concat_out1                  : unsigned(31 DOWNTO 0);  -- uint32

BEGIN
  -- Edge
  -- 
  -- U(k)
  -- 
  -- Edge
  -- 
  -- U(k)
  -- 
  -- Edge
  -- 
  -- U(k)

  u_MATLAB_Function : sg_bisssniffer_MATLAB_Function
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MA => Unit_Delay_out1,
              lineDelay => Line_Delay,  -- uint8
              y => y
              );

  enb <= clk_enable;

  Unit_Delay2_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        Unit_Delay2_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Unit_Delay2_reg(0) <= MA;
        Unit_Delay2_reg(1) <= Unit_Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Unit_Delay2_process;

  Unit_Delay_out1 <= Unit_Delay2_reg(1);

  -- 
  -- Store in Global RAM
  -- 
  -- 
  -- Store in Global RAM
  reduced_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        y_1 <= '0';
      ELSIF enb = '1' THEN
        y_1 <= y;
      END IF;
    END IF;
  END PROCESS reduced_process;


  
  FixPt_Relational_Operator1_relop1 <= '1' WHEN y > y_1 ELSE
      '0';

  
  FixPt_Relational_Operator_relop1 <= '1' WHEN y < y_1 ELSE
      '0';

  falling_edge_rsvd <= FixPt_Relational_Operator_relop1;

  Logical_Operator_out1 <= FixPt_Relational_Operator1_relop1 OR falling_edge_rsvd;

  Timeout_unsigned <= unsigned(Timeout);

  Logical_Operator1_out1 <=  NOT timeout_reached;

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  count_timeout_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        count_timeout_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        IF Logical_Operator_out1 = '1' THEN 
          count_timeout_out1 <= to_unsigned(0, 32);
        ELSIF Logical_Operator1_out1 = '1' THEN 
          count_timeout_out1 <= count_timeout_out1 + to_unsigned(1, 32);
        END IF;
      END IF;
    END IF;
  END PROCESS count_timeout_process;


  
  Relational_Operator1_relop1 <= '1' WHEN count_timeout_out1 >= Timeout_unsigned ELSE
      '0';

  timeout_reached <= Relational_Operator1_relop1;

  -- 
  -- Store in Global RAM
  Delay_Input12_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        U_k_1 <= '0';
      ELSIF enb = '1' THEN
        U_k_1 <= timeout_reached;
      END IF;
    END IF;
  END PROCESS Delay_Input12_process;


  
  FixPt_Relational_Operator2_relop1 <= '1' WHEN timeout_reached > U_k_1 ELSE
      '0';

  Unit_Delay1_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        Unit_Delay_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Unit_Delay_out1_1 <= FixPt_Relational_Operator2_relop1;
      END IF;
    END IF;
  END PROCESS Unit_Delay1_process;


  Unit_Delay3_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        Unit_Delay3_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Unit_Delay3_reg(0) <= SL;
        Unit_Delay3_reg(1) <= Unit_Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Unit_Delay3_process;

  Unit_Delay_out1_2 <= Unit_Delay3_reg(1);

  Bitwise_Operator_out1 <=  NOT Unit_Delay_out1_2;

  Bitwise_Operator3_out1 <= falling_edge_rsvd AND Bitwise_Operator_out1;

  Unit_Delay_Enabled_Resettable_Synchronous1_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous_out1 <= '0';
      ELSIF enb = '1' THEN
        IF FixPt_Relational_Operator2_relop1 = '1' THEN
          Unit_Delay_Enabled_Resettable_Synchronous_out1 <= '0';
        ELSIF Bitwise_Operator3_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable_Synchronous_out1 <= Bitwise_Operator3_out1;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_Synchronous1_process;


  Bitwise_Operator1_out1 <= falling_edge_rsvd AND (Unit_Delay_out1_2 AND Unit_Delay_Enabled_Resettable_Synchronous_out1);

  Unit_Delay_Enabled_Resettable_Synchronous2_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous_out1_1 <= '0';
      ELSIF enb = '1' THEN
        IF FixPt_Relational_Operator2_relop1 = '1' THEN
          Unit_Delay_Enabled_Resettable_Synchronous_out1_1 <= '0';
        ELSIF Bitwise_Operator1_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable_Synchronous_out1_1 <= Bitwise_Operator1_out1;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_Synchronous2_process;


  Bitwise_Operator2_out1 <= Unit_Delay_Enabled_Resettable_Synchronous_out1_1 AND falling_edge_rsvd;

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  Bit_Counter_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        Bit_Counter_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        IF Unit_Delay_out1_1 = '1' THEN 
          Bit_Counter_out1 <= to_unsigned(0, 32);
        ELSIF Bitwise_Operator2_out1 = '1' THEN 
          Bit_Counter_out1 <= Bit_Counter_out1 + to_unsigned(1, 32);
        END IF;
      END IF;
    END IF;
  END PROCESS Bit_Counter_process;


  Unit_Delay_Enabled_Synchronous1_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        Unit_Delay_Enabled_Synchronous1_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND Unit_Delay_out1_1 = '1' THEN
        Unit_Delay_Enabled_Synchronous1_out1 <= Bit_Counter_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous1_process;


  Number_Of_Bits <= std_logic_vector(Unit_Delay_Enabled_Synchronous1_out1);

  Bit_Shift_out1 <= Unit_Delay_Enabled_Resettable_Synchronous_out1_2 sll 1;

  Sum_add_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Unit_Delay_out1_2;
  Sum_out1 <= Bit_Shift_out1 + Sum_add_cast;

  Unit_Delay_Enabled_Resettable_Synchronous_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous_out1_2 <= to_unsigned(0, 64);
      ELSIF enb = '1' THEN
        IF Unit_Delay_out1_1 = '1' THEN
          Unit_Delay_Enabled_Resettable_Synchronous_out1_2 <= to_unsigned(0, 64);
        ELSIF Bitwise_Operator2_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable_Synchronous_out1_2 <= Sum_out1;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_Synchronous_process;


  Unit_Delay_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        Unit_Delay_out1_3 <= to_unsigned(0, 64);
      ELSIF enb = '1' THEN
        Unit_Delay_out1_3 <= Unit_Delay_Enabled_Resettable_Synchronous_out1_2;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  Unit_Delay_Enabled_Synchronous_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        Unit_Delay_Enabled_Synchronous_out1 <= to_unsigned(0, 64);
      ELSIF enb = '1' AND Unit_Delay_out1_1 = '1' THEN
        Unit_Delay_Enabled_Synchronous_out1 <= Unit_Delay_out1_3;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous_process;


  Bit_Slice_out1 <= Unit_Delay_Enabled_Synchronous_out1(63 DOWNTO 32);

  Data_high <= std_logic_vector(Bit_Slice_out1);

  Bit_Slice1_out1 <= Unit_Delay_Enabled_Synchronous_out1(31 DOWNTO 0);

  Data_low <= std_logic_vector(Bit_Slice1_out1);

  constant_out1 <= to_unsigned(16#2#, 2);

  Unique_ID_out1 <= to_unsigned(16#010#, 10);

  Major_Version_out1 <= to_unsigned(16#002#, 10);

  Minor_Version_out1 <= to_unsigned(16#004#, 10);

  Bit_Concat_out1 <= constant_out1 & Unique_ID_out1 & Major_Version_out1 & Minor_Version_out1;

  Version <= std_logic_vector(Bit_Concat_out1);

  ce_out <= clk_enable;

END rtl;

