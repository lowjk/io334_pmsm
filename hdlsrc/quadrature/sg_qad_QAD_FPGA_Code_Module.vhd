-- -------------------------------------------------------------
-- 
-- File Name: tmp_vhdl\qad_fpga_code_module\sg_qad_QAD_FPGA_Code_Module.vhd
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1.33333e-08
-- Target subsystem base rate: 1.33333e-08
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: sg_qad_QAD_FPGA_Code_Module
-- Source Path: qad_fpga_code_module/QAD FPGA Code Module
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY sg_qad_QAD_FPGA_Code_Module IS
  PORT( clk_i                             :   IN    std_logic;
        enable                            :   IN    std_logic;
        sampling_mode                     :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        index_control_mode                :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        lower_limit                       :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        upper_limit                       :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        latch_mode                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        A                                 :   IN    std_logic;
        B                                 :   IN    std_logic;
        C_index                           :   IN    std_logic;
        D                                 :   IN    std_logic;
        software_latch                    :   IN    std_logic;
        position                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        latched_one_position_duration     :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        latched_position_current_duration :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        index_found_flag                  :   OUT   std_logic;
        Version                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END sg_qad_QAD_FPGA_Code_Module;


ARCHITECTURE rtl OF sg_qad_QAD_FPGA_Code_Module IS

  -- Signals
  SIGNAL latch_mode_unsigned              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Switch1_out1                     : std_logic;
  SIGNAL Switch_out1                      : std_logic;
  SIGNAL Bitwise_Operator5_out1           : std_logic;
  SIGNAL Unit_Delay5_reg                  : std_logic_vector(0 TO 1) := (OTHERS => '0');  -- ufix1 [2]
  SIGNAL Unit_Delay5_out1                 : std_logic;
  SIGNAL index_control_mode_unsigned      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Compare_To_Constant1_out1_1      : std_logic;
  SIGNAL U_k_1                            : std_logic := '0';
  SIGNAL FixPt_Relational_Operator6_relop1 : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable_Synchronous1_out1 : std_logic := '0';
  SIGNAL Compare_To_Constant2_out1        : std_logic;
  SIGNAL Bitwise_Operator15_out1          : std_logic;
  SIGNAL Bitwise_Operator14_out1          : std_logic;
  SIGNAL Bitwise_Operator13_out1          : std_logic;
  SIGNAL Bitwise_Operator16_out1          : std_logic;
  SIGNAL Bitwise_Operator9_out1           : std_logic;
  SIGNAL upper_limit_signed               : signed(31 DOWNTO 0);  -- int32
  SIGNAL Subtract_out1                    : signed(31 DOWNTO 0);  -- int32
  SIGNAL sampling_mode_unsigned           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Compare_To_Constant3_out1        : std_logic;
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Compare_To_Constant4_out1        : std_logic;
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL Unit_Delay1_reg                  : std_logic_vector(0 TO 1) := (OTHERS => '0');  -- ufix1 [2]
  SIGNAL Unit_Delay1_out1                 : std_logic;
  SIGNAL Unit_Delay1_out1_1               : std_logic := '0';
  SIGNAL FixPt_Relational_Operator_relop1 : std_logic;
  SIGNAL Unit_Delay3_reg                  : std_logic_vector(0 TO 1) := (OTHERS => '0');  -- ufix1 [2]
  SIGNAL Unit_Delay3_out1                 : std_logic;
  SIGNAL Unit_Delay3_out1_1               : std_logic := '0';
  SIGNAL FixPt_Relational_Operator1_relop1 : std_logic;
  SIGNAL Bitwise_Operator_out1            : std_logic;
  SIGNAL Switch2_out1                     : std_logic;
  SIGNAL FixPt_Relational_Operator7_relop1 : std_logic;
  SIGNAL Switch1_out1_1                   : std_logic;
  SIGNAL FixPt_Relational_Operator4_relop1 : std_logic;
  SIGNAL Bitwise_Operator8_out1           : std_logic;
  SIGNAL Bitwise_Operator1_out1           : std_logic;
  SIGNAL FixPt_Relational_Operator2_relop1 : std_logic;
  SIGNAL Bitwise_Operator2_out1           : std_logic;
  SIGNAL FixPt_Relational_Operator5_relop1 : std_logic;
  SIGNAL Bitwise_Operator3_out1           : std_logic;
  SIGNAL Bitwise_Operator4_out1           : std_logic;
  SIGNAL FixPt_Relational_Operator3_relop1 : std_logic;
  SIGNAL Bitwise_Operator6_out1           : std_logic;
  SIGNAL Bitwise_Operator7_out1           : std_logic;
  SIGNAL lower_limit_signed               : signed(31 DOWNTO 0);  -- int32
  SIGNAL Subtract1_out1                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL Bitwise_Operator18_out1          : std_logic;
  SIGNAL Compare_To_Constant_out1_1       : std_logic;
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL Bitwise_Operator12_out1          : std_logic;
  SIGNAL Switch_out1_1                    : std_logic;
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL Switch3_out1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL Bitwise_Operator17_out1          : std_logic;
  SIGNAL U_k_1_1                          : std_logic := '0';
  SIGNAL HDL_Counter_out1                 : signed(31 DOWNTO 0) := to_signed(0, 32);  -- int32
  SIGNAL Relational_Operator1_relop1      : std_logic;
  SIGNAL Bitwise_Operator10_out1          : std_logic;
  SIGNAL Bitwise_Operator11_out1          : std_logic;
  SIGNAL FixPt_Relational_Operator8_relop1 : std_logic;
  SIGNAL HDL_Counter1_count_step          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Unit_Delay_Enabled_Synchronous_out1 : signed(31 DOWNTO 0) := to_signed(0, 32);  -- int32
  SIGNAL Bitwise_NOT_out1                 : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable_Synchronous_out1 : std_logic := '0';
  SIGNAL HDL_Counter_out1_1               : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL Unit_Delay_Enabled_Resettable_Synchronous1_out1_1 : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL Unit_Delay_Enabled_Synchronous1_out1 : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL Unit_Delay4_out1                 : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL Unit_Delay_Enabled_Synchronous2_out1 : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL Bit_Slice_out1                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Bit_Concat_out1                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL U_k_1_2                          : std_logic;
  SIGNAL U_k_1_3                          : std_logic;
  SIGNAL U_k_1_4                          : std_logic;
  SIGNAL U_k_1_5                          : std_logic;
  SIGNAL U_k_1_6                          : std_logic;
  SIGNAL U_k_1_7                          : std_logic;
  SIGNAL U_k_1_8                          : std_logic;

BEGIN
  -- Edge
  -- 
  -- U(k)
  -- 
  -- Edge
  -- 
  -- U(k)
  -- 
  -- Edge
  -- 
  -- U(k)
  -- 
  -- Edge
  -- 
  -- U(k)
  -- 
  -- Edge
  -- 
  -- U(k)
  -- 
  -- Edge
  -- 
  -- U(k)
  -- 
  -- Edge
  -- 
  -- U(k)
  -- 
  -- Edge
  -- 
  -- U(k)
  -- 
  -- Edge
  -- 
  -- U(k)

  latch_mode_unsigned <= unsigned(latch_mode);

  
  Compare_To_Constant_out1 <= '1' WHEN latch_mode_unsigned = to_unsigned(16#01#, 8) ELSE
      '0';

  
  switch_compare_1 <= '1' WHEN Compare_To_Constant_out1 > '0' ELSE
      '0';

  
  Compare_To_Constant1_out1 <= '1' WHEN latch_mode_unsigned = to_unsigned(16#02#, 8) ELSE
      '0';

  
  switch_compare_1_1 <= '1' WHEN Compare_To_Constant1_out1 > '0' ELSE
      '0';

  
  Switch1_out1 <= '1' WHEN switch_compare_1_1 = '0' ELSE
      software_latch;

  
  Switch_out1 <= Switch1_out1 WHEN switch_compare_1 = '0' ELSE
      D;

  Bitwise_Operator5_out1 <=  NOT enable;

  Unit_Delay5_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Unit_Delay5_reg(0) <= C_index;
      Unit_Delay5_reg(1) <= Unit_Delay5_reg(0);
    END IF;
  END PROCESS Unit_Delay5_process;

  Unit_Delay5_out1 <= Unit_Delay5_reg(1);

  index_control_mode_unsigned <= unsigned(index_control_mode);

  
  Compare_To_Constant1_out1_1 <= '1' WHEN index_control_mode_unsigned = to_unsigned(16#02#, 8) ELSE
      '0';

  -- 
  -- Store in Global RAM
  Delay_Input16_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      U_k_1 <= Unit_Delay5_out1;
    END IF;
  END PROCESS Delay_Input16_process;


  
  FixPt_Relational_Operator6_relop1 <= '1' WHEN Unit_Delay5_out1 > U_k_1 ELSE
      '0';

  Unit_Delay_Enabled_Resettable_Synchronous11_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF Bitwise_Operator5_out1 = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous1_out1 <= '0';
      ELSIF FixPt_Relational_Operator6_relop1 = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous1_out1 <= FixPt_Relational_Operator6_relop1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_Synchronous11_process;


  
  Compare_To_Constant2_out1 <= '1' WHEN index_control_mode_unsigned = to_unsigned(16#01#, 8) ELSE
      '0';

  Bitwise_Operator15_out1 <=  NOT Unit_Delay_Enabled_Resettable_Synchronous1_out1;

  Bitwise_Operator14_out1 <= Compare_To_Constant1_out1_1 AND Bitwise_Operator15_out1;

  Bitwise_Operator13_out1 <= Compare_To_Constant2_out1 OR Bitwise_Operator14_out1;

  Bitwise_Operator16_out1 <= Unit_Delay5_out1 AND Bitwise_Operator13_out1;

  Bitwise_Operator9_out1 <= Bitwise_Operator5_out1 OR Bitwise_Operator16_out1;

  upper_limit_signed <= signed(upper_limit);

  Subtract_out1 <= upper_limit_signed - to_signed(1, 32);

  sampling_mode_unsigned <= unsigned(sampling_mode);

  
  Compare_To_Constant3_out1 <= '1' WHEN sampling_mode_unsigned = to_unsigned(16#00#, 8) ELSE
      '0';

  
  switch_compare_1_2 <= '1' WHEN Compare_To_Constant3_out1 > '0' ELSE
      '0';

  
  Compare_To_Constant4_out1 <= '1' WHEN sampling_mode_unsigned = to_unsigned(16#01#, 8) ELSE
      '0';

  
  switch_compare_1_3 <= '1' WHEN Compare_To_Constant4_out1 > '0' ELSE
      '0';

  Unit_Delay1_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Unit_Delay1_reg(0) <= A;
      Unit_Delay1_reg(1) <= Unit_Delay1_reg(0);
    END IF;
  END PROCESS Unit_Delay1_process;

  Unit_Delay1_out1 <= Unit_Delay1_reg(1);

  -- 
  -- Store in Global RAM
  -- 
  -- 
  -- Store in Global RAM
  -- 
  -- 
  -- Store in Global RAM
  -- 
  -- 
  -- Store in Global RAM
  reduced_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Unit_Delay1_out1_1 <= Unit_Delay1_out1;
    END IF;
  END PROCESS reduced_process;


  
  FixPt_Relational_Operator_relop1 <= '1' WHEN Unit_Delay1_out1 /= Unit_Delay1_out1_1 ELSE
      '0';

  Unit_Delay3_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Unit_Delay3_reg(0) <= B;
      Unit_Delay3_reg(1) <= Unit_Delay3_reg(0);
    END IF;
  END PROCESS Unit_Delay3_process;

  Unit_Delay3_out1 <= Unit_Delay3_reg(1);

  -- 
  -- Store in Global RAM
  -- 
  -- 
  -- Store in Global RAM
  -- 
  -- 
  -- Store in Global RAM
  reduced_1_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Unit_Delay3_out1_1 <= Unit_Delay3_out1;
    END IF;
  END PROCESS reduced_1_process;


  
  FixPt_Relational_Operator1_relop1 <= '1' WHEN Unit_Delay3_out1 /= Unit_Delay3_out1_1 ELSE
      '0';

  Bitwise_Operator_out1 <= FixPt_Relational_Operator_relop1 OR FixPt_Relational_Operator1_relop1;

  
  Switch2_out1 <= Bitwise_Operator_out1 WHEN switch_compare_1_3 = '0' ELSE
      FixPt_Relational_Operator_relop1;

  
  FixPt_Relational_Operator7_relop1 <= '1' WHEN Unit_Delay1_out1 > Unit_Delay1_out1_1 ELSE
      '0';

  
  Switch1_out1_1 <= Switch2_out1 WHEN switch_compare_1_2 = '0' ELSE
      FixPt_Relational_Operator7_relop1;

  
  FixPt_Relational_Operator4_relop1 <= '1' WHEN Unit_Delay1_out1 > Unit_Delay1_out1_1 ELSE
      '0';

  Bitwise_Operator8_out1 <=  NOT Unit_Delay3_out1;

  Bitwise_Operator1_out1 <= FixPt_Relational_Operator4_relop1 AND Bitwise_Operator8_out1;

  
  FixPt_Relational_Operator2_relop1 <= '1' WHEN Unit_Delay1_out1 < Unit_Delay1_out1_1 ELSE
      '0';

  Bitwise_Operator2_out1 <= FixPt_Relational_Operator2_relop1 AND Unit_Delay3_out1;

  
  FixPt_Relational_Operator5_relop1 <= '1' WHEN Unit_Delay3_out1 > Unit_Delay3_out1_1 ELSE
      '0';

  Bitwise_Operator3_out1 <=  NOT Unit_Delay1_out1;

  Bitwise_Operator4_out1 <= Unit_Delay1_out1 AND FixPt_Relational_Operator5_relop1;

  
  FixPt_Relational_Operator3_relop1 <= '1' WHEN Unit_Delay3_out1 < Unit_Delay3_out1_1 ELSE
      '0';

  Bitwise_Operator6_out1 <= Bitwise_Operator3_out1 AND FixPt_Relational_Operator3_relop1;

  Bitwise_Operator7_out1 <= Bitwise_Operator6_out1 OR (Bitwise_Operator4_out1 OR (Bitwise_Operator1_out1 OR Bitwise_Operator2_out1));

  lower_limit_signed <= signed(lower_limit);

  Subtract1_out1 <= lower_limit_signed + to_signed(1, 32);

  Bitwise_Operator18_out1 <=  NOT Bitwise_Operator7_out1;

  
  Compare_To_Constant_out1_1 <= '1' WHEN index_control_mode_unsigned = to_unsigned(16#03#, 8) ELSE
      '0';

  
  switch_compare_1_4 <= '1' WHEN Compare_To_Constant_out1_1 > '0' ELSE
      '0';

  Bitwise_Operator12_out1 <= Switch1_out1_1 AND Unit_Delay5_out1;

  
  Switch_out1_1 <= Switch1_out1_1 WHEN switch_compare_1_4 = '0' ELSE
      Bitwise_Operator12_out1;

  
  switch_compare_1_5 <= '1' WHEN Relational_Operator_relop1 > '0' ELSE
      '0';

  
  Switch3_out1 <= upper_limit_signed WHEN switch_compare_1_5 = '0' ELSE
      lower_limit_signed;

  -- 
  -- Store in Global RAM
  Delay_Input18_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      U_k_1_1 <= Bitwise_Operator17_out1;
    END IF;
  END PROCESS Delay_Input18_process;


  
  Relational_Operator1_relop1 <= '1' WHEN HDL_Counter_out1 < Subtract1_out1 ELSE
      '0';

  Bitwise_Operator10_out1 <= Bitwise_Operator18_out1 AND (Relational_Operator1_relop1 AND Switch1_out1_1);

  
  Relational_Operator_relop1 <= '1' WHEN HDL_Counter_out1 > Subtract_out1 ELSE
      '0';

  Bitwise_Operator11_out1 <= Bitwise_Operator7_out1 AND (Relational_Operator_relop1 AND Switch1_out1_1);

  Bitwise_Operator17_out1 <= Bitwise_Operator11_out1 OR Bitwise_Operator10_out1;

  
  FixPt_Relational_Operator8_relop1 <= '1' WHEN Bitwise_Operator17_out1 > U_k_1_1 ELSE
      '0';

  -- Free running, Signed Counter
  --  initial value   = 0
  --  step value      = 1
  HDL_Counter1_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF Bitwise_Operator9_out1 = '1' THEN 
        HDL_Counter_out1 <= to_signed(0, 32);
      ELSIF FixPt_Relational_Operator8_relop1 = '1' THEN 
        HDL_Counter_out1 <= Switch3_out1;
      ELSIF Switch_out1_1 = '1' THEN 
        HDL_Counter_out1 <= HDL_Counter_out1 + HDL_Counter1_count_step;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;

  
  HDL_Counter1_count_step <= to_signed(1, 32) WHEN Bitwise_Operator7_out1 = '1' ELSE
      to_signed(-1, 32);

  Unit_Delay_Enabled_Synchronous_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF Switch_out1 = '1' THEN
        Unit_Delay_Enabled_Synchronous_out1 <= HDL_Counter_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous_process;


  position <= std_logic_vector(Unit_Delay_Enabled_Synchronous_out1);

  Bitwise_NOT_out1 <=  NOT enable;

  Unit_Delay_Enabled_Resettable_Synchronous_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF Bitwise_NOT_out1 = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous_out1 <= '0';
      ELSIF Switch1_out1_1 = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous_out1 <= Switch1_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_Synchronous_process;


  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  HDL_Counter_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF Switch1_out1_1 = '1' THEN 
        HDL_Counter_out1_1 <= to_unsigned(0, 32);
      ELSIF Unit_Delay_Enabled_Resettable_Synchronous_out1 = '1' THEN 
        HDL_Counter_out1_1 <= HDL_Counter_out1_1 + to_unsigned(1, 32);
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  Unit_Delay_Enabled_Resettable_Synchronous1_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF Bitwise_NOT_out1 = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous1_out1_1 <= to_unsigned(0, 32);
      ELSIF Switch1_out1_1 = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous1_out1_1 <= HDL_Counter_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_Synchronous1_process;


  Unit_Delay_Enabled_Synchronous1_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF Switch_out1 = '1' THEN
        Unit_Delay_Enabled_Synchronous1_out1 <= Unit_Delay_Enabled_Resettable_Synchronous1_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous1_process;


  latched_one_position_duration <= std_logic_vector(Unit_Delay_Enabled_Synchronous1_out1);

  Unit_Delay4_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Unit_Delay4_out1 <= HDL_Counter_out1_1;
    END IF;
  END PROCESS Unit_Delay4_process;


  Unit_Delay_Enabled_Synchronous2_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF Switch_out1 = '1' THEN
        Unit_Delay_Enabled_Synchronous2_out1 <= Unit_Delay4_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous2_process;


  latched_position_current_duration <= std_logic_vector(Unit_Delay_Enabled_Synchronous2_out1);

  Bit_Slice_out1 <= to_unsigned(16#008#, 10);

  Bit_Concat_out1 <= "10" & (Bit_Slice_out1 & unsigned'("0000000100" & "0000000100"));

  Version <= std_logic_vector(Bit_Concat_out1);

  index_found_flag <= Unit_Delay_Enabled_Resettable_Synchronous1_out1;

END rtl;

