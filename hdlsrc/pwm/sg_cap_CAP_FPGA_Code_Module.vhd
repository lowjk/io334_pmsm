-- -------------------------------------------------------------
-- 
-- File Name: tmp_vhdl\cap_fpga_code_module\sg_cap_CAP_FPGA_Code_Module.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1.33333e-08
-- Target subsystem base rate: 1.33333e-08
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: sg_cap_CAP_FPGA_Code_Module
-- Source Path: cap_fpga_code_module/CAP FPGA Code Module
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY sg_cap_CAP_FPGA_Code_Module IS
  PORT( clk_i                             :   IN    std_logic;
        reset_i                           :   IN    std_logic;
        Enable                            :   IN    std_logic;
        CAP_In                            :   IN    std_logic;
        CAP_HW_Trigger                    :   IN    std_logic;
        Capture_Mode                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        CAP_SW_Trigger                    :   IN    std_logic;
        Timeout                           :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        PWM_pattern                       :   IN    std_logic;
        Period                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        High_Duration                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        Low_Duration                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        TOn                               :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        TOff                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        Trigger                           :   OUT   std_logic;
        Data_Valid                        :   OUT   std_logic;
        Version                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END sg_cap_CAP_FPGA_Code_Module;


ARCHITECTURE rtl OF sg_cap_CAP_FPGA_Code_Module IS

  -- Signals
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Capture_Mode_unsigned            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Delay18_reg                      : std_logic_vector(0 TO 1) := (OTHERS => '0');  -- ufix1 [2]
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Delay_out1_1                     : std_logic := '0';
  SIGNAL Delay1_out1                      : std_logic := '0';
  SIGNAL Delay2_out1                      : std_logic := '0';
  SIGNAL Delay3_out1                      : std_logic := '0';
  SIGNAL Delay4_out1                      : std_logic := '0';
  SIGNAL Delay5_out1                      : std_logic := '0';
  SIGNAL Delay6_out1                      : std_logic := '0';
  SIGNAL Delay7_out1                      : std_logic := '0';
  SIGNAL Delay8_out1                      : std_logic := '0';
  SIGNAL Delay9_out1                      : std_logic := '0';
  SIGNAL Delay10_out1                     : std_logic := '0';
  SIGNAL Delay11_out1                     : std_logic := '0';
  SIGNAL Delay12_out1                     : std_logic := '0';
  SIGNAL Delay13_out1                     : std_logic := '0';
  SIGNAL Delay14_out1                     : std_logic := '0';
  SIGNAL Delay15_out1                     : std_logic := '0';
  SIGNAL Bit_Concat_out1                  : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL rising_edge_rsvd                 : std_logic;
  SIGNAL falling_edge_rsvd                : std_logic;
  SIGNAL store_rising_edge_out1           : std_logic := '0';
  SIGNAL NOT_out1                         : std_logic;
  SIGNAL rising_out1                      : std_logic;
  SIGNAL store_falling_edge_out1          : std_logic := '0';
  SIGNAL NOT1_out1                        : std_logic;
  SIGNAL falling_out1                     : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable_Synchronous_out1 : std_logic := '0';
  SIGNAL debounce1_out1                   : std_logic := '0';
  SIGNAL FixPt_Relational_Operator3_relop1 : std_logic;
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL FixPt_Relational_Operator2_relop1 : std_logic;
  SIGNAL Switch1_out1                     : std_logic;
  SIGNAL Delay19_reg                      : std_logic_vector(0 TO 1) := (OTHERS => '0');  -- ufix1 [2]
  SIGNAL Delay1_out1_1                    : std_logic;
  SIGNAL Delay_out1_2                     : std_logic := '0';
  SIGNAL Delay1_out1_2                    : std_logic := '0';
  SIGNAL Delay2_out1_1                    : std_logic := '0';
  SIGNAL Delay3_out1_1                    : std_logic := '0';
  SIGNAL Delay4_out1_1                    : std_logic := '0';
  SIGNAL Delay5_out1_1                    : std_logic := '0';
  SIGNAL Delay6_out1_1                    : std_logic := '0';
  SIGNAL Delay7_out1_1                    : std_logic := '0';
  SIGNAL Delay8_out1_1                    : std_logic := '0';
  SIGNAL Delay9_out1_1                    : std_logic := '0';
  SIGNAL Delay10_out1_1                   : std_logic := '0';
  SIGNAL Delay11_out1_1                   : std_logic := '0';
  SIGNAL Delay12_out1_1                   : std_logic := '0';
  SIGNAL Delay13_out1_1                   : std_logic := '0';
  SIGNAL Delay14_out1_1                   : std_logic := '0';
  SIGNAL Delay15_out1_1                   : std_logic := '0';
  SIGNAL Bit_Concat_out1_1                : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL rising_edge_rsvd_1               : std_logic;
  SIGNAL falling_edge_rsvd_1              : std_logic;
  SIGNAL store_rising_edge_out1_1         : std_logic := '0';
  SIGNAL NOT_out1_1                       : std_logic;
  SIGNAL rising_out1_1                    : std_logic;
  SIGNAL store_falling_edge_out1_1        : std_logic := '0';
  SIGNAL NOT1_out1_1                      : std_logic;
  SIGNAL falling_out1_1                   : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable_Synchronous_out1_1 : std_logic := '0';
  SIGNAL U_k_1                            : std_logic := '0';
  SIGNAL Compare_To_Constant2_out1        : std_logic;
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL FixPt_Relational_Operator4_relop1 : std_logic;
  SIGNAL Switch_out1                      : std_logic;
  SIGNAL U_k_1_1                          : std_logic := '0';
  SIGNAL FixPt_Relational_Operator5_relop1 : std_logic;
  SIGNAL Switch2_out1                     : std_logic;
  SIGNAL Compare_To_Constant_out1_1       : std_logic;
  SIGNAL Compare_To_Constant1_out1_1      : std_logic;
  SIGNAL Bitwise_Operator3_out1           : std_logic;
  SIGNAL Bitwise_Operator4_out1           : std_logic;
  SIGNAL Timeout_unsigned                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Compare_To_Zero_out1             : std_logic;
  SIGNAL Bitwise_Operator1_out1           : std_logic;
  SIGNAL Bitwise_Operator5_out1           : std_logic;
  SIGNAL Tiimeout_Counter_out1            : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL Relational_Operator2_relop1      : std_logic;
  SIGNAL Bitwise_Operator2_out1           : std_logic;
  SIGNAL trigger_1                        : std_logic;
  SIGNAL Bitwise_Operator_out1            : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable2_switch_delay : std_logic := '0';  -- ufix1
  SIGNAL Unit_Delay_Enabled_Resettable_out1 : std_logic;
  SIGNAL Period_Counter_out1              : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bitwise_Operator3_out1_1         : std_logic;
  SIGNAL High_Duration_Counter_out1       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Unit_Delay_Enabled1_out1         : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL Unit_Delay_Enabled5_out1         : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL Gain_cast                        : unsigned(63 DOWNTO 0);  -- ufix64_En32
  SIGNAL half_high_period_k_1             : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bitwise_Operator_out1_1          : std_logic;
  SIGNAL Bitwise_Operator2_out1_1         : std_logic;
  SIGNAL Low_Duration_Counter_out1        : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL low_period_k                     : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL Gain2_out1                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Unit_Delay_Enabled_out1          : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL Gain1_cast                       : unsigned(63 DOWNTO 0);  -- ufix64_En32
  SIGNAL half_period_k                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Unit_Delay_Enabled6_out1         : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL Add_out1                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL latched_period                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bitwise_Operator1_out1_1         : std_logic;
  SIGNAL FixPt_Relational_Operator1_relop1 : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable_switch_delay : std_logic := '0';  -- ufix1
  SIGNAL Unit_Delay_Enabled_Resettable_out1_1 : std_logic;
  SIGNAL TOn_Counter_out1                 : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL Unit_Delay_Enabled3_out1         : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL FixPt_Relational_Operator_relop1 : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable1_switch_delay : std_logic := '0';  -- ufix1
  SIGNAL Unit_Delay_Enabled_Resettable1_out1 : std_logic;
  SIGNAL TOff_Counter_out1                : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL Unit_Delay_Enabled4_out1         : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL Unit_Delay_out1                  : std_logic := '0';
  SIGNAL HDL_Counter_out1                 : std_logic := '0';  -- ufix1
  SIGNAL Compare_To_Constant3_out1        : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable11_switch_delay : std_logic := '0';  -- ufix1
  SIGNAL Unit_Delay_Enabled_Resettable1_out1_1 : std_logic;
  SIGNAL Bit_Slice_out1                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Bit_Concat_out1_2                : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL U_k_1_2                          : std_logic;
  SIGNAL U_k_1_3                          : std_logic;
  SIGNAL U_k_1_4                          : std_logic;
  SIGNAL U_k_1_5                          : std_logic;

BEGIN
  -- The Capture mode determines what source is used to compute the PWM period.
  -- Possible values are:
  -- 
  -- mode = 0: high transitions triggered
  -- mode = 1: low transitions triggered
  -- mode = 2: dedicated hardware trigger input
  -- mode = 3: dedicated software trigger input
  -- 
  -- Edge
  -- 
  -- U(k)
  -- 
  -- Edge
  -- 
  -- U(k)
  -- 
  -- Edge
  -- 
  -- U(k)
  -- 
  -- Edge
  -- 
  -- U(k)
  -- 
  -- Edge
  -- 
  -- U(k)
  -- 
  -- Edge
  -- 
  -- U(k)

  
  switch_compare_1 <= '1' WHEN PWM_pattern > '0' ELSE
      '0';

  Capture_Mode_unsigned <= unsigned(Capture_Mode);

  
  Compare_To_Constant_out1 <= '1' WHEN Capture_Mode_unsigned = to_unsigned(16#01#, 8) ELSE
      '0';

  
  switch_compare_1_1 <= '1' WHEN Compare_To_Constant_out1 > '0' ELSE
      '0';

  Delay18_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay18_reg(0) <= CAP_In;
      Delay18_reg(1) <= Delay18_reg(0);
    END IF;
  END PROCESS Delay18_process;

  Delay_out1 <= Delay18_reg(1);

  Delay16_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay_out1_1 <= Delay_out1;
    END IF;
  END PROCESS Delay16_process;


  Delay17_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay1_out1 <= Delay_out1_1;
    END IF;
  END PROCESS Delay17_process;


  Delay21_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay2_out1 <= Delay1_out1;
    END IF;
  END PROCESS Delay21_process;


  Delay31_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay3_out1 <= Delay2_out1;
    END IF;
  END PROCESS Delay31_process;


  Delay41_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay4_out1 <= Delay3_out1;
    END IF;
  END PROCESS Delay41_process;


  Delay51_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay5_out1 <= Delay4_out1;
    END IF;
  END PROCESS Delay51_process;


  Delay61_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay6_out1 <= Delay5_out1;
    END IF;
  END PROCESS Delay61_process;


  Delay71_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay7_out1 <= Delay6_out1;
    END IF;
  END PROCESS Delay71_process;


  Delay81_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay8_out1 <= Delay7_out1;
    END IF;
  END PROCESS Delay81_process;


  Delay91_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay9_out1 <= Delay8_out1;
    END IF;
  END PROCESS Delay91_process;


  Delay101_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay10_out1 <= Delay9_out1;
    END IF;
  END PROCESS Delay101_process;


  Delay111_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay11_out1 <= Delay10_out1;
    END IF;
  END PROCESS Delay111_process;


  Delay121_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay12_out1 <= Delay11_out1;
    END IF;
  END PROCESS Delay121_process;


  Delay131_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay13_out1 <= Delay12_out1;
    END IF;
  END PROCESS Delay131_process;


  Delay141_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay14_out1 <= Delay13_out1;
    END IF;
  END PROCESS Delay141_process;


  Delay151_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay15_out1 <= Delay14_out1;
    END IF;
  END PROCESS Delay151_process;


  Bit_Concat_out1 <= unsigned'(Delay_out1_1 & Delay1_out1 & Delay2_out1 & Delay3_out1 & Delay4_out1 & Delay5_out1 & Delay6_out1 & Delay7_out1 & Delay8_out1 & Delay9_out1 & Delay10_out1 & Delay11_out1 & Delay12_out1 & Delay13_out1 & Delay14_out1 & Delay15_out1);

  
  rising_edge_rsvd <= '1' WHEN Bit_Concat_out1 = to_unsigned(16#FFFE#, 16) ELSE
      '0';

  
  falling_edge_rsvd <= '1' WHEN Bit_Concat_out1 = to_unsigned(16#0001#, 16) ELSE
      '0';

  store_rising_edge1_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF falling_edge_rsvd = '1' THEN
        store_rising_edge_out1 <= '0';
      ELSIF rising_edge_rsvd = '1' THEN
        store_rising_edge_out1 <= rising_edge_rsvd;
      END IF;
    END IF;
  END PROCESS store_rising_edge1_process;


  NOT_out1 <=  NOT store_rising_edge_out1;

  rising_out1 <= rising_edge_rsvd AND NOT_out1;

  store_falling_edge1_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF rising_edge_rsvd = '1' THEN
        store_falling_edge_out1 <= '0';
      ELSIF falling_edge_rsvd = '1' THEN
        store_falling_edge_out1 <= falling_edge_rsvd;
      END IF;
    END IF;
  END PROCESS store_falling_edge1_process;


  NOT1_out1 <=  NOT store_falling_edge_out1;

  falling_out1 <= NOT1_out1 AND falling_edge_rsvd;

  Unit_Delay_Enabled_Resettable_Synchronous1_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF falling_out1 = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous_out1 <= '0';
      ELSIF rising_out1 = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous_out1 <= rising_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_Synchronous1_process;


  -- 
  -- Store in Global RAM
  -- 
  -- 
  -- Store in Global RAM
  -- 
  -- 
  -- Store in Global RAM
  -- 
  -- 
  -- Store in Global RAM
  reduced_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      debounce1_out1 <= Unit_Delay_Enabled_Resettable_Synchronous_out1;
    END IF;
  END PROCESS reduced_process;


  
  FixPt_Relational_Operator3_relop1 <= '1' WHEN Unit_Delay_Enabled_Resettable_Synchronous_out1 > debounce1_out1 ELSE
      '0';

  
  Compare_To_Constant1_out1 <= '1' WHEN Capture_Mode_unsigned = to_unsigned(16#02#, 8) ELSE
      '0';

  
  switch_compare_1_2 <= '1' WHEN Compare_To_Constant1_out1 > '0' ELSE
      '0';

  
  FixPt_Relational_Operator2_relop1 <= '1' WHEN Unit_Delay_Enabled_Resettable_Synchronous_out1 < debounce1_out1 ELSE
      '0';

  
  Switch1_out1 <= FixPt_Relational_Operator3_relop1 WHEN switch_compare_1_1 = '0' ELSE
      FixPt_Relational_Operator2_relop1;

  Delay19_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay19_reg(0) <= CAP_HW_Trigger;
      Delay19_reg(1) <= Delay19_reg(0);
    END IF;
  END PROCESS Delay19_process;

  Delay1_out1_1 <= Delay19_reg(1);

  Delay_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay_out1_2 <= Delay1_out1_1;
    END IF;
  END PROCESS Delay_process;


  Delay1_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay1_out1_2 <= Delay_out1_2;
    END IF;
  END PROCESS Delay1_process;


  Delay2_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay2_out1_1 <= Delay1_out1_2;
    END IF;
  END PROCESS Delay2_process;


  Delay3_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay3_out1_1 <= Delay2_out1_1;
    END IF;
  END PROCESS Delay3_process;


  Delay4_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay4_out1_1 <= Delay3_out1_1;
    END IF;
  END PROCESS Delay4_process;


  Delay5_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay5_out1_1 <= Delay4_out1_1;
    END IF;
  END PROCESS Delay5_process;


  Delay6_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay6_out1_1 <= Delay5_out1_1;
    END IF;
  END PROCESS Delay6_process;


  Delay7_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay7_out1_1 <= Delay6_out1_1;
    END IF;
  END PROCESS Delay7_process;


  Delay8_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay8_out1_1 <= Delay7_out1_1;
    END IF;
  END PROCESS Delay8_process;


  Delay9_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay9_out1_1 <= Delay8_out1_1;
    END IF;
  END PROCESS Delay9_process;


  Delay10_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay10_out1_1 <= Delay9_out1_1;
    END IF;
  END PROCESS Delay10_process;


  Delay11_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay11_out1_1 <= Delay10_out1_1;
    END IF;
  END PROCESS Delay11_process;


  Delay12_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay12_out1_1 <= Delay11_out1_1;
    END IF;
  END PROCESS Delay12_process;


  Delay13_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay13_out1_1 <= Delay12_out1_1;
    END IF;
  END PROCESS Delay13_process;


  Delay14_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay14_out1_1 <= Delay13_out1_1;
    END IF;
  END PROCESS Delay14_process;


  Delay15_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Delay15_out1_1 <= Delay14_out1_1;
    END IF;
  END PROCESS Delay15_process;


  Bit_Concat_out1_1 <= unsigned'(Delay_out1_2 & Delay1_out1_2 & Delay2_out1_1 & Delay3_out1_1 & Delay4_out1_1 & Delay5_out1_1 & Delay6_out1_1 & Delay7_out1_1 & Delay8_out1_1 & Delay9_out1_1 & Delay10_out1_1 & Delay11_out1_1 & Delay12_out1_1 & Delay13_out1_1 & Delay14_out1_1 & Delay15_out1_1);

  
  rising_edge_rsvd_1 <= '1' WHEN Bit_Concat_out1_1 = to_unsigned(16#FFFE#, 16) ELSE
      '0';

  
  falling_edge_rsvd_1 <= '1' WHEN Bit_Concat_out1_1 = to_unsigned(16#0001#, 16) ELSE
      '0';

  store_rising_edge_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF falling_edge_rsvd_1 = '1' THEN
        store_rising_edge_out1_1 <= '0';
      ELSIF rising_edge_rsvd_1 = '1' THEN
        store_rising_edge_out1_1 <= rising_edge_rsvd_1;
      END IF;
    END IF;
  END PROCESS store_rising_edge_process;


  NOT_out1_1 <=  NOT store_rising_edge_out1_1;

  rising_out1_1 <= rising_edge_rsvd_1 AND NOT_out1_1;

  store_falling_edge_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF rising_edge_rsvd_1 = '1' THEN
        store_falling_edge_out1_1 <= '0';
      ELSIF falling_edge_rsvd_1 = '1' THEN
        store_falling_edge_out1_1 <= falling_edge_rsvd_1;
      END IF;
    END IF;
  END PROCESS store_falling_edge_process;


  NOT1_out1_1 <=  NOT store_falling_edge_out1_1;

  falling_out1_1 <= NOT1_out1_1 AND falling_edge_rsvd_1;

  Unit_Delay_Enabled_Resettable_Synchronous_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF falling_out1_1 = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous_out1_1 <= '0';
      ELSIF rising_out1_1 = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous_out1_1 <= rising_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_Synchronous_process;


  -- 
  -- Store in Global RAM
  Delay_Input14_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      U_k_1 <= Unit_Delay_Enabled_Resettable_Synchronous_out1_1;
    END IF;
  END PROCESS Delay_Input14_process;


  
  Compare_To_Constant2_out1 <= '1' WHEN Capture_Mode_unsigned = to_unsigned(16#03#, 8) ELSE
      '0';

  
  switch_compare_1_3 <= '1' WHEN Compare_To_Constant2_out1 > '0' ELSE
      '0';

  
  FixPt_Relational_Operator4_relop1 <= '1' WHEN Unit_Delay_Enabled_Resettable_Synchronous_out1_1 > U_k_1 ELSE
      '0';

  
  Switch_out1 <= Switch1_out1 WHEN switch_compare_1_2 = '0' ELSE
      FixPt_Relational_Operator4_relop1;

  -- 
  -- Store in Global RAM
  Delay_Input15_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      U_k_1_1 <= CAP_SW_Trigger;
    END IF;
  END PROCESS Delay_Input15_process;


  
  FixPt_Relational_Operator5_relop1 <= '1' WHEN CAP_SW_Trigger > U_k_1_1 ELSE
      '0';

  
  Switch2_out1 <= Switch_out1 WHEN switch_compare_1_3 = '0' ELSE
      FixPt_Relational_Operator5_relop1;

  
  Compare_To_Constant_out1_1 <= '1' WHEN Capture_Mode_unsigned = to_unsigned(16#00#, 8) ELSE
      '0';

  
  Compare_To_Constant1_out1_1 <= '1' WHEN Capture_Mode_unsigned = to_unsigned(16#01#, 8) ELSE
      '0';

  Bitwise_Operator3_out1 <= Compare_To_Constant_out1_1 OR Compare_To_Constant1_out1_1;

  Bitwise_Operator4_out1 <= Switch2_out1 AND Bitwise_Operator3_out1;

  Timeout_unsigned <= unsigned(Timeout);

  
  Compare_To_Zero_out1 <= '1' WHEN Timeout_unsigned > to_unsigned(0, 32) ELSE
      '0';

  Bitwise_Operator5_out1 <= Bitwise_Operator1_out1 OR Bitwise_Operator4_out1;

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  Tiimeout_Counter_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF Bitwise_Operator5_out1 = '1' THEN 
        Tiimeout_Counter_out1 <= to_unsigned(0, 32);
      ELSIF Enable = '1' THEN 
        Tiimeout_Counter_out1 <= Tiimeout_Counter_out1 + to_unsigned(1, 32);
      END IF;
    END IF;
  END PROCESS Tiimeout_Counter_process;


  
  Relational_Operator2_relop1 <= '1' WHEN Tiimeout_Counter_out1 = Timeout_unsigned ELSE
      '0';

  Bitwise_Operator1_out1 <= Relational_Operator2_relop1 AND Compare_To_Zero_out1;

  Bitwise_Operator2_out1 <= Bitwise_Operator1_out1 OR Switch2_out1;

  trigger_1 <= Bitwise_Operator2_out1;

  Bitwise_Operator_out1 <=  NOT Enable;

  Unit_Delay_Enabled_Resettable2_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF Bitwise_Operator_out1 = '1' THEN
        Unit_Delay_Enabled_Resettable2_switch_delay <= '0';
      ELSIF Bitwise_Operator2_out1 = '1' THEN
        Unit_Delay_Enabled_Resettable2_switch_delay <= Bitwise_Operator2_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable2_process;

  
  Unit_Delay_Enabled_Resettable_out1 <= '0' WHEN Bitwise_Operator_out1 = '1' ELSE
      Unit_Delay_Enabled_Resettable2_switch_delay;

  -- Free running, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  Period_Counter_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF reset_i = '1' THEN
        Period_Counter_out1 <= to_unsigned(1, 32);
      ELSE 
        IF trigger_1 = '1' THEN 
          Period_Counter_out1 <= to_unsigned(1, 32);
        ELSIF Unit_Delay_Enabled_Resettable_out1 = '1' THEN 
          Period_Counter_out1 <= Period_Counter_out1 + to_unsigned(1, 32);
        END IF;
      END IF;
    END IF;
  END PROCESS Period_Counter_process;


  Bitwise_Operator3_out1_1 <= Unit_Delay_Enabled_Resettable_out1 AND Unit_Delay_Enabled_Resettable_Synchronous_out1;

  -- Free running, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  High_Duration_Counter_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF reset_i = '1' THEN
        High_Duration_Counter_out1 <= to_unsigned(1, 32);
      ELSE 
        IF trigger_1 = '1' THEN 
          High_Duration_Counter_out1 <= to_unsigned(1, 32);
        ELSIF Bitwise_Operator3_out1_1 = '1' THEN 
          High_Duration_Counter_out1 <= High_Duration_Counter_out1 + to_unsigned(1, 32);
        END IF;
      END IF;
    END IF;
  END PROCESS High_Duration_Counter_process;


  Unit_Delay_Enabled1_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF trigger_1 = '1' THEN
        Unit_Delay_Enabled1_out1 <= High_Duration_Counter_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled1_process;


  Unit_Delay_Enabled5_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF trigger_1 = '1' THEN
        Unit_Delay_Enabled5_out1 <= Unit_Delay_Enabled1_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled5_process;


  Gain_cast <= resize(Unit_Delay_Enabled5_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  half_high_period_k_1 <= Gain_cast(63 DOWNTO 32);

  Bitwise_Operator_out1_1 <=  NOT Unit_Delay_Enabled_Resettable_Synchronous_out1;

  Bitwise_Operator2_out1_1 <= Unit_Delay_Enabled_Resettable_out1 AND Bitwise_Operator_out1_1;

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  Low_Duration_Counter_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF trigger_1 = '1' THEN 
        Low_Duration_Counter_out1 <= to_unsigned(0, 32);
      ELSIF Bitwise_Operator2_out1_1 = '1' THEN 
        Low_Duration_Counter_out1 <= Low_Duration_Counter_out1 + to_unsigned(1, 32);
      END IF;
    END IF;
  END PROCESS Low_Duration_Counter_process;


  Unit_Delay_Enabled2_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF trigger_1 = '1' THEN
        low_period_k <= Low_Duration_Counter_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled2_process;


  Gain2_out1 <= to_unsigned(0, 32);

  Unit_Delay_Enabled_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF trigger_1 = '1' THEN
        Unit_Delay_Enabled_out1 <= Period_Counter_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_process;


  Gain1_cast <= resize(Unit_Delay_Enabled1_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  half_period_k <= Gain1_cast(63 DOWNTO 32);

  Unit_Delay_Enabled6_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF trigger_1 = '1' THEN
        Unit_Delay_Enabled6_out1 <= low_period_k;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled6_process;


  Add_out1 <= ((half_high_period_k_1 + Gain2_out1) + half_period_k) + Unit_Delay_Enabled6_out1;

  
  latched_period <= Unit_Delay_Enabled_out1 WHEN switch_compare_1 = '0' ELSE
      Add_out1;

  Period <= std_logic_vector(latched_period);

  High_Duration <= std_logic_vector(Unit_Delay_Enabled1_out1);

  Low_Duration <= std_logic_vector(low_period_k);

  Bitwise_Operator1_out1_1 <= Unit_Delay_Enabled_Resettable_out1 AND trigger_1;

  
  FixPt_Relational_Operator1_relop1 <= '1' WHEN Unit_Delay_Enabled_Resettable_Synchronous_out1 > debounce1_out1 ELSE
      '0';

  Unit_Delay_Enabled_Resettable_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF FixPt_Relational_Operator1_relop1 = '1' THEN
        Unit_Delay_Enabled_Resettable_switch_delay <= '0';
      ELSIF Bitwise_Operator1_out1_1 = '1' THEN
        Unit_Delay_Enabled_Resettable_switch_delay <= Bitwise_Operator1_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_process;

  
  Unit_Delay_Enabled_Resettable_out1_1 <= '0' WHEN FixPt_Relational_Operator1_relop1 = '1' ELSE
      Unit_Delay_Enabled_Resettable_switch_delay;

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  TOn_Counter_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF trigger_1 = '1' THEN 
        TOn_Counter_out1 <= to_unsigned(0, 32);
      ELSIF Unit_Delay_Enabled_Resettable_out1_1 = '1' THEN 
        TOn_Counter_out1 <= TOn_Counter_out1 + to_unsigned(1, 32);
      END IF;
    END IF;
  END PROCESS TOn_Counter_process;


  Unit_Delay_Enabled3_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF trigger_1 = '1' THEN
        Unit_Delay_Enabled3_out1 <= TOn_Counter_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled3_process;


  TOn <= std_logic_vector(Unit_Delay_Enabled3_out1);

  
  FixPt_Relational_Operator_relop1 <= '1' WHEN Unit_Delay_Enabled_Resettable_Synchronous_out1 < debounce1_out1 ELSE
      '0';

  Unit_Delay_Enabled_Resettable1_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF FixPt_Relational_Operator_relop1 = '1' THEN
        Unit_Delay_Enabled_Resettable1_switch_delay <= '0';
      ELSIF Bitwise_Operator1_out1_1 = '1' THEN
        Unit_Delay_Enabled_Resettable1_switch_delay <= Bitwise_Operator1_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable1_process;

  
  Unit_Delay_Enabled_Resettable1_out1 <= '0' WHEN FixPt_Relational_Operator_relop1 = '1' ELSE
      Unit_Delay_Enabled_Resettable1_switch_delay;

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  TOff_Counter_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF trigger_1 = '1' THEN 
        TOff_Counter_out1 <= to_unsigned(0, 32);
      ELSIF Unit_Delay_Enabled_Resettable1_out1 = '1' THEN 
        TOff_Counter_out1 <= TOff_Counter_out1 + to_unsigned(1, 32);
      END IF;
    END IF;
  END PROCESS TOff_Counter_process;


  Unit_Delay_Enabled4_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF trigger_1 = '1' THEN
        Unit_Delay_Enabled4_out1 <= TOff_Counter_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled4_process;


  TOff <= std_logic_vector(Unit_Delay_Enabled4_out1);

  Unit_Delay_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      Unit_Delay_out1 <= trigger_1;
    END IF;
  END PROCESS Unit_Delay_process;


  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  HDL_Counter_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF Bitwise_Operator1_out1 = '1' THEN 
        HDL_Counter_out1 <= '0';
      ELSIF Switch2_out1 = '1' THEN 
        HDL_Counter_out1 <=  NOT HDL_Counter_out1;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  Compare_To_Constant3_out1 <= '1' WHEN HDL_Counter_out1 = '1' ELSE
      '0';

  Unit_Delay_Enabled_Resettable11_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF Bitwise_Operator1_out1 = '1' THEN
        Unit_Delay_Enabled_Resettable11_switch_delay <= '0';
      ELSIF Compare_To_Constant3_out1 = '1' THEN
        Unit_Delay_Enabled_Resettable11_switch_delay <= Compare_To_Constant3_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable11_process;

  
  Unit_Delay_Enabled_Resettable1_out1_1 <= '0' WHEN Bitwise_Operator1_out1 = '1' ELSE
      Unit_Delay_Enabled_Resettable11_switch_delay;

  Bit_Slice_out1 <= to_unsigned(16#007#, 10);

  Bit_Concat_out1_2 <= "10" & (Bit_Slice_out1 & unsigned'("0000000001" & "0000001001"));

  Version <= std_logic_vector(Bit_Concat_out1_2);

  Trigger <= Unit_Delay_out1;

  Data_Valid <= Unit_Delay_Enabled_Resettable1_out1_1;

END rtl;

